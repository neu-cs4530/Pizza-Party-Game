import { mock, mockClear } from 'jest-mock-extended';
import { nanoid } from 'nanoid';
import Player from '../lib/Player';
import { defaultLocation, getLastEmittedEvent } from '../TestUtils';
import ConversationArea from './ConversationArea';
import InteractableArea, { PLAYER_SPRITE_HEIGHT, PLAYER_SPRITE_WIDTH } from './InteractableArea';
class TestInteractableArea extends InteractableArea {
    handleCommand() {
        throw new Error('Method not implemented.');
    }
    toModel() {
        return { id: this.id, occupants: [], type: 'ConversationArea' };
    }
}
const HALF_W = PLAYER_SPRITE_WIDTH / 2;
const HALF_H = PLAYER_SPRITE_HEIGHT / 2;
describe('InteractableArea', () => {
    const testAreaBox = { x: 100, y: 100, width: 100, height: 100 };
    let testArea;
    const id = nanoid();
    let newPlayer;
    const townEmitter = mock();
    beforeEach(() => {
        mockClear(townEmitter);
        testArea = new TestInteractableArea(id, testAreaBox, townEmitter);
        newPlayer = new Player(nanoid(), mock());
        testArea.add(newPlayer);
    });
    describe('add', () => {
        it('Adds the player to the occupants list', () => {
            expect(testArea.occupantsByID).toEqual([newPlayer.id]);
        });
        it("Sets the player's conversationLabel and emits an update for their location", () => {
            expect(newPlayer.location.interactableID).toEqual(id);
            const lastEmittedMovement = getLastEmittedEvent(townEmitter, 'playerMoved');
            expect(lastEmittedMovement.location.interactableID).toEqual(id);
        });
    });
    describe('remove', () => {
        it('Removes the player from the list of occupants', () => {
            testArea.remove(newPlayer);
            expect(testArea.occupantsByID).toEqual([]);
        });
        it("Clears the player's conversationLabel and emits an update for their location", () => {
            mockClear(townEmitter);
            testArea.remove(newPlayer);
            expect(newPlayer.location.interactableID).toBeUndefined();
            const lastEmittedMovement = getLastEmittedEvent(townEmitter, 'playerMoved');
            expect(lastEmittedMovement.location.interactableID).toBeUndefined();
        });
    });
    describe('isActive', () => {
        it('Returns true when there are players in the area', () => {
            expect(testArea.isActive).toBe(true);
        });
        it('Returns false when there are no players in the area', () => {
            testArea.remove(newPlayer);
            expect(testArea.isActive).toBe(false);
        });
    });
    describe('addPlayersWithinBounds', () => {
        let playersInArea;
        let playersNotInArea;
        beforeEach(() => {
            playersInArea = [];
            playersNotInArea = [];
            const box = testArea.boundingBox;
            for (let i = 0; i < 10; i++) {
                const player = new Player(nanoid(), mock());
                player.location.x = box.x + box.width / 2;
                player.location.y = box.y + box.height / 2;
                playersInArea.push(player);
            }
            for (let i = 0; i < 10; i++) {
                const player = new Player(nanoid(), mock());
                player.location.x = -100;
                player.location.y = -100;
                playersNotInArea.push(player);
            }
            const mixedPlayers = playersInArea
                .concat(playersNotInArea)
                .sort((a, b) => a.id.localeCompare(b.id));
            testArea.addPlayersWithinBounds(mixedPlayers);
        });
        it('Does not include players not within the area', () => {
            playersNotInArea.forEach(player => expect(testArea.occupantsByID.includes(player.id)).toBe(false));
        });
        it('Includes all players that are within the area', () => {
            playersInArea.forEach(player => expect(testArea.occupantsByID.includes(player.id)).toBe(true));
            expect(playersInArea.length).toEqual(playersInArea.length);
        });
    });
    describe('contains', () => {
        const { x, y, width, height } = testAreaBox;
        it.each([
            { x: x + width / 2, y: y + width / 2 },
            { x: x + 10 + width / 2, y: y + 10 + width / 2 },
            { x: x - 1 + width, y: y + 1 },
            { x: x + 1, y: y + 1 },
            { x: x - 1 + width, y: y - 1 + height },
            { x: x + 1, y: y - 1 + height },
        ])('Returns true for locations that are inside of the area %p', (location) => {
            expect(testArea.contains({ ...defaultLocation(), x: location.x, y: location.y })).toBe(true);
        });
        it.each([
            { x: x - 1 + HALF_W + width, y: y + 1 - HALF_H },
            { x: x + 1 - HALF_W, y: y + 1 - HALF_H },
            { x: x - 1 + HALF_W + width, y: y - 1 + HALF_H + height },
            { x: x + 1 - HALF_W, y: y - 1 + HALF_H + height },
        ])('Returns true for locations that are outside of the area, but are included due to the player sprite size overlapping with the target area', (location) => {
            expect(testArea.contains({ ...defaultLocation(), x: location.x, y: location.y })).toBe(true);
        });
        it.each([
            { x: x + HALF_W + width, y: y - HALF_H },
            { x: x - HALF_W, y: y - HALF_H },
            { x: x + HALF_W + width, y: y + HALF_H + height },
            { x: x - HALF_W, y: y + HALF_H + height },
        ])('Returns false for locations that exactly hit the edge of the area', (location) => {
            expect(testArea.contains({ ...defaultLocation(), x: location.x, y: location.y })).toBe(false);
        });
        it.each([
            { x: x + width * 2, y: y - height },
            { x: x - width, y: y - width },
            { x: x + width * 2, y: y + height * 2 },
            { x: x - width, y: y + height * 2 },
            { x: x + 1, y: y - height },
            { x: x - width, y: y + 1 },
            { x: x + width * 2, y: y + 1 },
            { x: x + 1, y: y + height * 2 },
        ])('Returns false for locations that are outside of the area', (location) => {
            expect(testArea.contains({ ...defaultLocation(), x: location.x, y: location.y })).toBe(false);
        });
    });
    describe('overlaps', () => {
        const cheight = testAreaBox.height / 2;
        const cwidth = testAreaBox.width / 2;
        const cx = testAreaBox.x + cwidth;
        const cy = testAreaBox.y + cheight;
        const { x, y, height, width } = testAreaBox;
        it.each([
            { x: cx, y: cy, width: 2, height: 2 },
            { x: cx + 4, y: cy + 4, width: 2, height: 2 },
            { x: cx + 4, y: cy + 4, width: 2, height: 2 },
        ])('Returns true for locations that are contained entirely %p', (intersectBox) => {
            expect(testArea.overlaps(new ConversationArea({ id: 'testArea', occupants: [] }, intersectBox, mock()))).toBe(true);
        });
        it.each([
            { x: x - 50, y: y - 50, width: 100, height: 100 },
            { x: x - 50, y: y + height - 50, width: 100, height: 100 },
            { x: x + width - 50, y: y - 50, width: 100, height: 100 },
            { x: x + width - 50, y: y + height - 50, width: 100, height: 100 },
            {
                x: x - PLAYER_SPRITE_WIDTH / 2,
                y: y - PLAYER_SPRITE_HEIGHT / 2,
                width: PLAYER_SPRITE_WIDTH + 1,
                height: PLAYER_SPRITE_HEIGHT + 1,
            },
            {
                x: x - PLAYER_SPRITE_WIDTH / 2,
                y: y + height + PLAYER_SPRITE_HEIGHT / 2,
                width: PLAYER_SPRITE_WIDTH + 1,
                height: PLAYER_SPRITE_HEIGHT + 1,
            },
            {
                x: x + width + PLAYER_SPRITE_WIDTH / 2,
                y: y - PLAYER_SPRITE_HEIGHT / 2,
                width: PLAYER_SPRITE_WIDTH + 1,
                height: PLAYER_SPRITE_HEIGHT + 1,
            },
            {
                x: x + width + PLAYER_SPRITE_WIDTH / 2,
                y: y + height + PLAYER_SPRITE_HEIGHT / 2,
                width: PLAYER_SPRITE_WIDTH + 1,
                height: PLAYER_SPRITE_HEIGHT + 1,
            },
        ])('Returns true for locations that are overlapping with edges %p', (intersectBox) => {
            expect(testArea.overlaps(new ConversationArea({ id: 'testArea', occupants: [] }, intersectBox, mock()))).toBe(true);
        });
        it.each([
            { x: x - 50, y: y - 50, width: 10, height: 10 },
            { x: x - 50, y: y + height + 50, width: 10, height: 10 },
            { x: x + width + 50, y: y - 50, width: 100, height: 100 },
            { x: x + width + 50, y: y + height + 50, width: 100, height: 100 },
            {
                x: x - PLAYER_SPRITE_WIDTH * 1.5,
                y: y - PLAYER_SPRITE_HEIGHT * 1.5,
                width: PLAYER_SPRITE_WIDTH / 2,
                height: PLAYER_SPRITE_HEIGHT / 2,
            },
            {
                x: x - PLAYER_SPRITE_WIDTH,
                y: y + height + PLAYER_SPRITE_HEIGHT,
                width: PLAYER_SPRITE_WIDTH,
                height: PLAYER_SPRITE_HEIGHT,
            },
            {
                x: x + width + PLAYER_SPRITE_WIDTH,
                y: y - PLAYER_SPRITE_HEIGHT,
                width: PLAYER_SPRITE_WIDTH,
                height: PLAYER_SPRITE_HEIGHT,
            },
            {
                x: x + width + PLAYER_SPRITE_WIDTH,
                y: y + height + PLAYER_SPRITE_HEIGHT,
                width: PLAYER_SPRITE_WIDTH,
                height: PLAYER_SPRITE_HEIGHT,
            },
        ])('Returns false for locations that have no overlap %p', (intersectBox) => {
            expect(testArea.overlaps(new ConversationArea({ id: 'testArea', occupants: [] }, intersectBox, mock()))).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,